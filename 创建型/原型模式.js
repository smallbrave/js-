//在 JavaScript 中，我们使用原型模式，并不是为了得到一个副本，
//而是为了得到与构造函数（类）相对应的类型的实例、实现数据/方法的共享。
//克隆是实现这个目的的方法，但克隆本身并不是我们的目的。

// 原型编程范式的核心思想就是利用实例来描述对象，用实例作为定义对象和继承的基础。
//在 JavaScript 中，原型编程范式的体现就是基于原型链的继承。这其中，对原型、原型链的理解是关键。

function Person(name, age) {
    this.name = name;
    this.age = age;
}

var fn = new Person("kangkang", 20);

//每一个构造函数都有一个prototype属性，指向构造函数的原型对象，
//其中含有一个constructor属性指向当前构造函数，实现了一个双向的指向；

//每个通过new Person()创建的实例，都含有一个__proto__属性，指向构造函数的原型对象
//我们可以将共享的属性和函数放在这个原型对象中，之后我们通过该构造函数创建的实例就
//可以对原型对象中的数据进行共享